#!/bin/bash
###########################################################################
#                                                                         #
#       Script: DRAW                                                      #
#       Author: Daniel Alexander                                          #
#                                                                         #
#       What it does:                                                     #
#         generate the PS output file for a given FASTA file via RNAfold  #
#                                                                         #
#       Possible calls:                                                   #
#       1)  sh draw.sh <FASTA file>                                       #
#             generates the PS output file as well as all debug files     #
#             and log files produced by RNAfold                           #
#       2)  sh draw.sh <FASTA file> --valgrind                            #
#             the same as above but executes RNAfold with valgrind's      #
#             default memcheck                                            #
#       3)  sh draw.sh <FASTA file> --valgrind-full                       #
#             the same as above but executes RNAfold with valgrind's      #
#             full memcheck                                               #
#       4)  sh draw.sh <FASTA file> --noPS                                #
#             generates <FASTA file>.fold file which contains the         #
#             input file's content as well as the folding constraint      #
#             generated by RNAfold with --noPS option                     #
#       5)  sh draw.sh <FASTA file> --constraint                          #
#             generates the PS output file while speeding up the process  #
#             using the result of this script via --noPS option           #
#             note: input is <FASTA file>, not <FOLD file>                #
#                                                                         #
###########################################################################


file=$1
fold=$file.fold
echo "[ FILE ] $file"

if [ "$2" = "--valgrind" ]; then
# perform default call while using valgrind's default check
    if [ -f $fold ]; then
        # cat $fold | sed 's/\//_/g' | RNAfold -C --enforceConstrain
        # skip the whole folding process (massive speed up)
        cat $fold | sed 's/\//_/g' | valgrind RNAplot -t4
    else
        cat $file | sed 's/\//_/g' | valgrind RNAfold
    fi

elif [ "$2" = "--valgrind-full" ]; then
# perform default call while using valgrind's full check
    if [ -f $fold ]; then
        cat $file | sed 's/\//_/g' | valgrind --leak-check=full RNAplot -t4
    else
        cat $file | sed 's/\//_/g' | valgrind --leak-check=full RNAfold
    fi

elif [ "$2" = "--callgrind" ]; then
    if [ -f $fold ]; then
        cat $fold | sed 's/\//_/g' | valgrind --tool=callgrind RNAplot -t4
    else
        cat $file | sed 's/\//_/g' | valgrind --tool=callgrind RNAfold
    fi

elif [ "$2" = "--noPS" ]; then
# generate folding constraint
    cat $file | sed 's/\//_/g' | RNAfold --noPS > $fold

elif [ "$2" = "--constraint" ]; then
# enforce constraint (after calling --noPS option to generate .fa.fold file)
    if [ -f $fold ]; then
        # cat $fold | sed 's/\//_/g' | RNAfold -C --enforceConstrain
        # skip the whole folding process (massive speed up)
        cat $fold | sed 's/\//_/g' | RNAplot -t4
        cat $fold | sed 's/\//_/g' | RNAplot -t4 --allowFlipping
    else
        printf "Missing file: %s\n" $fold
        printf "apply the following command for preparing the --force call\n"
        printf "%s %s --noPS\n" $0 $1
    fi

else
    # default call
    cat $file | sed 's/\//_/g' | RNAfold
fi
